<project name="fantasm" default="test" basedir=".">

    <property environment="env"/>
    <property name="test.verbosity" value="1"/>
    <property name="test.loglevel" value="40"/>
    <property name="tests" value=""/>
    <property name="srcdir" value="${basedir}/src"/>
    <property name="testdir" value="${basedir}/test"/>
    <property name="toolsdir" value="${basedir}/tools"/>
    <property name="releasedir" value="${basedir}/release"/>
    <property name="appenginedir" value="/usr/local/google_appengine"/>
    <property name="tests.pythonpath" value="${testdir}:${srcdir}:${basedir}:${appenginedir}:${appenginedir}/lib/simplejson:${appenginedir}/lib/yaml/lib:${appenginedir}/lib/webob-1.1.1:${appenginedir}/lib/django:${appenginedir}/lib/fancy_urllib:${toolsdir}"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/tools/ant/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="clean">
        <delete>
            <fileset dir="${srcdir}" includes="**/*.pyc"/>
            <fileset dir="${srcdir}" includes="**/*.pyo"/>
            <fileset dir="${testdir}" includes="**/*.pyc"/>
            <fileset dir="${testdir}" includes="**/*.pyo"/>
        </delete>
        <delete dir="${releasedir}"/>
    </target>

    <target name="test-python">
        <property name="python.executable" value="python"/>
    </target>

    <target name="test-python27">
        <property name="python.executable" value="python2.7"/>
    </target>

    <target name="_test">
        <echo>${python.executable}</echo>
        <exec dir="${basedir}" executable="${python.executable}" failonerror="true">
            <env key="PYTHONPATH" value="${tests.pythonpath}"/>
            <env key='APPENGINEDIR' value='${appenginedir}'/>
            <env key="UNITTEST_VERBOSITY" value="${test.verbosity}"/>
            <env key="UNITTEST_LOGLEVEL" value="${test.loglevel}"/>
            <arg line="${toolsdir}/test_runner.py ${tests}"/>
        </exec>
    </target>

    <target name="test" depends="test-python, _test"/>
    <target name="test27" depends="test-python27, _test"/>

    <target name="pylint-module-src">
        <property name="pylint.module" value="fantasm"/>
        <property name="pylint.cwd" value="${srcdir}"/>
    </target>

    <target name="pylint-module-test">
        <property name="pylint.module" value="fantasm_tests complex_machine email_batch main simple_machine url_fanout"/>
        <property name="pylint.cwd" value="${testdir}"/>
    </target>

    <target name="_pylint">
        <exec dir="${pylint.cwd}" executable="pylint" failonerror="false" outputproperty="pylint.output">
            <env key="PATH" value="/usr/local/bin" />
            <env key="PYTHONPATH" value="${tests.pythonpath}" />
            <arg line="--rcfile=${toolsdir}/pylintrc --include-ids=y ${pylint.module}"/>
        </exec>

        <!-- echo for debugging -->
        <echo>${pylint.output}</echo>

        <!-- make sure the output is as expected -->
        <fail message="Pylint produced output. It must have failed.">
            <condition>
                <not>
                    <equals arg1="${pylint.output}" arg2=""/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="pylint" depends="pylint-module-src, _pylint"/>
    <target name="pylint-test" depends="pylint-module-test, _pylint"/>

    <target name="copy-test-files" depends="clean">
        <!-- copy src files to builddir -->
        <delete dir="${releasedir}"/>
        <mkdir dir="${releasedir}"/>
        <copy todir="${releasedir}">
            <fileset dir="${testdir}">
                <exclude name="*.pyc"/>
            </fileset>
        </copy>
        <delete file="${releasedir}/fantasm" failonerror="false"/> <!-- remove bum symlink -->
        <copy todir="${releasedir}/fantasm" overwrite="true">
            <fileset dir="${srcdir}/fantasm">
                <exclude name="*.pyc"/>
            </fileset>
        </copy>
    </target>

    <target name="rewrite-app-yaml" depends="copy-test-files">
        <!-- rewrite app.yaml -->
        <replaceregexp file="${releasedir}/app.yaml"
                       match="application:.+"
                       replace="application: ${app.yaml.application}"/>
        <replaceregexp file="${releasedir}/app.yaml"
                       match="version:.+"
                       replace="version: ${app.yaml.version}"/>
    </target>

    <target name="_setup-integration-test-properties">
        <property name="integration-test-url" value="integration-test"/>
    </target>
    <target name="_setup-ndb-integration-test-properties">
        <property name="integration-test-url" value="ndb-integration-test"/>
    </target>

    <target name="_integration-test" depends="copy-test-files, rewrite-app-yaml">
        <!--
            This target is used to run a consistent integration test by the owners of Fantasm.
        -->
        <exec executable="${appenginedir}/appcfg.py" resultproperty="appcfg.retcode" inputstring="${env.gae.pwd}">
            <arg line="update ${releasedir} --no_cookies --email=${env.gae.email} --passin"/>
        </exec>

        <fail message="App Engine deployment failed; non-zero return code.">
            <condition>
                <not>
                    <equals arg1="${appcfg.retcode}" arg2="0"/>
                </not>
            </condition>
        </fail>

        <!-- kick off the integration run -->
        <tempfile property="temp.file" suffix=".html"/>
        <get src="http://${app.yaml.version}.${app.yaml.application}.appspot.com/${integration-test-url}/?token=${integration_test_token}" dest="${temp.file}"/>
    </target>

    <target name="integration-test" depends="_setup-integration-test-properties, _integration-test"/>
    <target name="ndb-integration-test" depends="_setup-ndb-integration-test-properties, _integration-test"/>

</project>
